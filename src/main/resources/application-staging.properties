spring.datasource.url=jdbc:postgresql:${DB_HOST}/dms-demo


spring.datasource.username=${PG_DB_USER}
spring.datasource.password=${PG_DB_PASSWORD}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)5432
spring.jpa.hibernate.ddl-auto = update

spring.flyway.baseline-on-migrate = true
spring.flyway.baselineOnMigrate = true
spring.flyway.check-location=true
spring.flyway.locations=classpath:db/migration
spring.flyway.schemas=public
spring.flyway.enabled=false

# Kafka
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVER}
spring.kafka.properties.schema.registry.url=${KAFKA_SCHEMA_REGISTRY_URL}
spring.kafka.properties.specific.avro.reader=true

# producer configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# consumer configuration
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.auto-offset-reset=earliest

#avro.groudId=group_id
